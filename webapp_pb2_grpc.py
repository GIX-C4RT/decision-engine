# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import webapp_pb2 as webapp__pb2


class WebAppStub(object):
    """The Fetch service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WebApp_CheckOut = channel.unary_unary(
                '/WebApp/WebApp_CheckOut',
                request_serializer=webapp__pb2.WebApp_CheckOutRequest.SerializeToString,
                response_deserializer=webapp__pb2.WebApp_CheckOutReply.FromString,
                )
        self.WebApp_CheckIn = channel.unary_unary(
                '/WebApp/WebApp_CheckIn',
                request_serializer=webapp__pb2.WebApp_CheckInRequest.SerializeToString,
                response_deserializer=webapp__pb2.WebApp_CheckInReply.FromString,
                )


class WebAppServicer(object):
    """The Fetch service definition.
    """

    def WebApp_CheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WebApp_CheckIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebAppServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WebApp_CheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.WebApp_CheckOut,
                    request_deserializer=webapp__pb2.WebApp_CheckOutRequest.FromString,
                    response_serializer=webapp__pb2.WebApp_CheckOutReply.SerializeToString,
            ),
            'WebApp_CheckIn': grpc.unary_unary_rpc_method_handler(
                    servicer.WebApp_CheckIn,
                    request_deserializer=webapp__pb2.WebApp_CheckInRequest.FromString,
                    response_serializer=webapp__pb2.WebApp_CheckInReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WebApp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WebApp(object):
    """The Fetch service definition.
    """

    @staticmethod
    def WebApp_CheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WebApp/WebApp_CheckOut',
            webapp__pb2.WebApp_CheckOutRequest.SerializeToString,
            webapp__pb2.WebApp_CheckOutReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WebApp_CheckIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WebApp/WebApp_CheckIn',
            webapp__pb2.WebApp_CheckInRequest.SerializeToString,
            webapp__pb2.WebApp_CheckInReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
