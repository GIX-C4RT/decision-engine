# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import webapp_pb2 as webapp__pb2


class WebAppStub(object):
  """The Fetch service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.WebApp_CheckOut = channel.unary_unary(
        '/WebApp/WebApp_CheckOut',
        request_serializer=webapp__pb2.WebApp_CheckOutRequest.SerializeToString,
        response_deserializer=webapp__pb2.WebApp_CheckOutReply.FromString,
        )
    self.WebApp_CheckIn = channel.unary_unary(
        '/WebApp/WebApp_CheckIn',
        request_serializer=webapp__pb2.WebApp_CheckInRequest.SerializeToString,
        response_deserializer=webapp__pb2.WebApp_CheckInReply.FromString,
        )


class WebAppServicer(object):
  """The Fetch service definition.
  """

  def WebApp_CheckOut(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WebApp_CheckIn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WebAppServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'WebApp_CheckOut': grpc.unary_unary_rpc_method_handler(
          servicer.WebApp_CheckOut,
          request_deserializer=webapp__pb2.WebApp_CheckOutRequest.FromString,
          response_serializer=webapp__pb2.WebApp_CheckOutReply.SerializeToString,
      ),
      'WebApp_CheckIn': grpc.unary_unary_rpc_method_handler(
          servicer.WebApp_CheckIn,
          request_deserializer=webapp__pb2.WebApp_CheckInRequest.FromString,
          response_serializer=webapp__pb2.WebApp_CheckInReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'WebApp', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
